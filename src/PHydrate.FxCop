<?xml version="1.0" encoding="utf-8"?>
<FxCopProject Version="10.0" Name="My FxCop Project">
 <ProjectOptions>
  <SharedProject>True</SharedProject>
  <Stylesheet Apply="False">$(FxCopDir)\Xml\FxCopReport.xsl</Stylesheet>
  <SaveMessages>
   <Project Status="Active, Excluded, Good, Noise" NewOnly="False" />
   <Report Status="Active, Good, Noise" NewOnly="False" />
  </SaveMessages>
  <ProjectFile Compress="True" DefaultTargetCheck="True" DefaultRuleCheck="True" SaveByRuleGroup="" Deterministic="True" />
  <EnableMultithreadedLoad>True</EnableMultithreadedLoad>
  <EnableMultithreadedAnalysis>True</EnableMultithreadedAnalysis>
  <SourceLookup>True</SourceLookup>
  <AnalysisExceptionsThreshold>10</AnalysisExceptionsThreshold>
  <RuleExceptionsThreshold>1</RuleExceptionsThreshold>
  <Spelling Locale="en-US" />
  <OverrideRuleVisibilities>False</OverrideRuleVisibilities>
  <CustomDictionaries SearchFxCopDir="True" SearchUserProfile="True" SearchProjectDir="True" />
  <SearchGlobalAssemblyCache>False</SearchGlobalAssemblyCache>
  <DeadlockDetectionTimeout>120</DeadlockDetectionTimeout>
  <IgnoreGeneratedCode>False</IgnoreGeneratedCode>
 </ProjectOptions>
 <Targets>
  <Target Name="$(ProjectDir)/PHydrate/bin/Debug/PHydrate.dll" Analyze="True" AnalyzeAllChildren="True" />
 </Targets>
 <Rules>
  <RuleFiles>
   <RuleFile Name="$(FxCopDir)\Rules\DesignRules.dll" Enabled="True" AllRulesEnabled="True" />
   <RuleFile Name="$(FxCopDir)\Rules\GlobalizationRules.dll" Enabled="True" AllRulesEnabled="True" />
   <RuleFile Name="$(FxCopDir)\Rules\InteroperabilityRules.dll" Enabled="True" AllRulesEnabled="True" />
   <RuleFile Name="$(FxCopDir)\Rules\MobilityRules.dll" Enabled="True" AllRulesEnabled="True" />
   <RuleFile Name="$(FxCopDir)\Rules\NamingRules.dll" Enabled="True" AllRulesEnabled="True" />
   <RuleFile Name="$(FxCopDir)\Rules\PerformanceRules.dll" Enabled="True" AllRulesEnabled="True" />
   <RuleFile Name="$(FxCopDir)\Rules\PortabilityRules.dll" Enabled="True" AllRulesEnabled="True" />
   <RuleFile Name="$(FxCopDir)\Rules\SecurityRules.dll" Enabled="True" AllRulesEnabled="True" />
   <RuleFile Name="$(FxCopDir)\Rules\SecurityTransparencyRules.dll" Enabled="True" AllRulesEnabled="True" />
   <RuleFile Name="$(FxCopDir)\Rules\UsageRules.dll" Enabled="True" AllRulesEnabled="True" />
  </RuleFiles>
  <Groups />
  <Settings />
 </Rules>
 <FxCopReport Version="10.0">
  <Namespaces>
   <Namespace Name="PHydrate.Util">
    <Messages>
     <Message Id="Util" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2011-03-04 19:11:05Z">
      <Issue Name="Namespace">
       <Item>Util</Item>
       <Item>PHydrate.Util</Item>
      </Issue>
     </Message>
    </Messages>
   </Namespace>
   <Namespace Name="PHydrate.Util.MemberInfoWrapper">
    <Messages>
     <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Created="2011-03-04 19:11:05Z">
      <Issue>
       <Item>PHydrate.Util.MemberInfoWrapper</Item>
      </Issue>
     </Message>
     <Message Id="Util" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2011-03-04 19:11:05Z">
      <Issue Name="Namespace">
       <Item>Util</Item>
       <Item>PHydrate.Util.MemberInfoWrapper</Item>
      </Issue>
     </Message>
    </Messages>
   </Namespace>
  </Namespaces>
  <Targets>
   <Target Name="$(ProjectDir)/PHydrate/bin/Debug/PHydrate.dll">
    <Modules>
     <Module Name="phydrate.dll">
      <Messages>
       <Message TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210" Created="2011-03-04 19:11:05Z">
        <Issue Name="NoStrongName">
         <Item>'PHydrate.dll'</Item>
        </Issue>
       </Message>
       <Message TypeName="MarkAssembliesWithClsCompliant" Category="Microsoft.Design" CheckId="CA1014" Created="2011-03-04 19:11:05Z">
        <Issue>
         <Item>'PHydrate.dll'</Item>
        </Issue>
       </Message>
      </Messages>
      <Namespaces>
       <Namespace Name="PHydrate">
        <Types>
         <Type Name="IDbSpecification`1">
          <Messages>
           <Message Id="Db" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Created="2011-03-04 19:11:05Z">
            <Issue Name="Type">
             <Item>Db</Item>
             <Item>'IDbSpecification&lt;T&gt;'</Item>
             <Item>DB</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name="#Criteria">
            <Messages>
             <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Created="2011-03-04 19:11:05Z">
              <Issue>
               <Item>'IDbSpecification&lt;T&gt;.Criteria'</Item>
               <Item>'Expression&lt;Func&lt;T, bool&gt;&gt;'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="ISession">
          <Members>
           <Member Name="#Get`1(PHydrate.ISpecification`1&lt;!!0&gt;)">
            <Messages>
             <Message Id="Get" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Created="2011-03-04 19:11:05Z">
              <Issue Name="Member">
               <Item>'ISession.Get&lt;T&gt;(ISpecification&lt;T&gt;)'</Item>
               <Item>Get</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#Get`1(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!!0,System.Boolean&gt;&gt;)">
            <Messages>
             <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Created="2011-03-04 19:11:05Z">
              <Issue>
               <Item>'ISession.Get&lt;T&gt;(Expression&lt;Func&lt;T, bool&gt;&gt;)'</Item>
               <Item>'Expression&lt;Func&lt;T, bool&gt;&gt;'</Item>
              </Issue>
             </Message>
             <Message Id="Get" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Created="2011-03-04 19:11:05Z">
              <Issue Name="Member">
               <Item>'ISession.Get&lt;T&gt;(Expression&lt;Func&lt;T, bool&gt;&gt;)'</Item>
               <Item>Get</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="ISessionFactory">
          <Members>
           <Member Name="#GetSession()">
            <Messages>
             <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Created="2011-03-04 19:11:05Z">
              <Issue Certainty="50">
               <Item>'ISessionFactory.GetSession()'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="ISpecification`1">
          <Messages>
           <Message TypeName="AvoidEmptyInterfaces" Category="Microsoft.Design" CheckId="CA1040" Created="2011-03-04 19:11:05Z">
            <Issue>
             <Item>'ISpecification&lt;T&gt;'</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="PHydrateException">
          <Messages>
           <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Created="2011-03-04 19:11:05Z">
            <Issue Name="MissingConstructor">
             <Item>'PHydrateException'</Item>
             <Item>protected PHydrateException(SerializationInfo, StreamingContext)</Item>
            </Issue>
            <Issue Name="MissingConstructor">
             <Item>'PHydrateException'</Item>
             <Item>public PHydrateException()</Item>
            </Issue>
            <Issue Name="MissingConstructor">
             <Item>'PHydrateException'</Item>
             <Item>public PHydrateException(String, Exception)</Item>
            </Issue>
           </Message>
           <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Created="2011-03-04 19:11:05Z">
            <Issue Certainty="95" Level="Error">
             <Item>'PHydrateException'</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name="#.ctor(System.String,System.String[])">
            <Messages>
             <Message Id="string" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Created="2011-03-04 19:11:05Z">
              <Issue Name="LanguageIndependentMemberParameter">
               <Item>'PHydrateException.PHydrateException(string, params string[])'</Item>
               <Item>String</Item>
               <Item>'formatString'</Item>
              </Issue>
             </Message>
             <Message Id="System.String.Format(System.String,System.Object[])" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-03-04 19:11:05Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'string.Format(string, params object[])'</Item>
               <Item>'PHydrateException.PHydrateException(string, params string[])'</Item>
               <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="PHydrateInternalException">
          <Messages>
           <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Created="2011-03-04 19:11:05Z">
            <Issue Name="MissingConstructor">
             <Item>'PHydrateInternalException'</Item>
             <Item>protected PHydrateInternalException(SerializationInfo, StreamingContext)</Item>
            </Issue>
            <Issue Name="MissingConstructor">
             <Item>'PHydrateInternalException'</Item>
             <Item>public PHydrateInternalException()</Item>
            </Issue>
            <Issue Name="MissingConstructor">
             <Item>'PHydrateInternalException'</Item>
             <Item>public PHydrateInternalException(String, Exception)</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name="#.ctor(System.String,System.String[])">
            <Messages>
             <Message Id="string" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Created="2011-03-04 19:11:05Z">
              <Issue Name="LanguageIndependentMemberParameter">
               <Item>'PHydrateInternalException.PHydrateInternalException(string, params string[])'</Item>
               <Item>String</Item>
               <Item>'formatString'</Item>
              </Issue>
             </Message>
             <Message Id="System.String.Format(System.String,System.Object[])" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-03-04 19:11:05Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'string.Format(string, params object[])'</Item>
               <Item>'PHydrateInternalException.PHydrateInternalException(string, params string[])'</Item>
               <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="PHydrate.Attributes">
        <Types>
         <Type Name="CreateUsingAttribute">
          <Messages>
           <Message TypeName="AvoidUnsealedAttributes" Category="Microsoft.Performance" CheckId="CA1813" Created="2011-03-04 19:11:05Z">
            <Issue>
             <Item>'CreateUsingAttribute'</Item>
            </Issue>
           </Message>
           <Message TypeName="MarkAttributesWithAttributeUsage" Category="Microsoft.Design" CheckId="CA1018" Created="2011-03-04 19:11:05Z">
            <Issue Name="Inherited" Certainty="75" Level="Warning">
             <Item>'CreateUsingAttribute'</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="DeleteUsingAttribute">
          <Messages>
           <Message TypeName="AvoidUnsealedAttributes" Category="Microsoft.Performance" CheckId="CA1813" Created="2011-03-04 19:11:05Z">
            <Issue>
             <Item>'DeleteUsingAttribute'</Item>
            </Issue>
           </Message>
           <Message TypeName="MarkAttributesWithAttributeUsage" Category="Microsoft.Design" CheckId="CA1018" Created="2011-03-04 19:11:05Z">
            <Issue Name="Inherited" Certainty="75" Level="Warning">
             <Item>'DeleteUsingAttribute'</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="HydrateUsingAttribute">
          <Messages>
           <Message TypeName="AvoidUnsealedAttributes" Category="Microsoft.Performance" CheckId="CA1813" Created="2011-03-04 19:11:05Z">
            <Issue>
             <Item>'HydrateUsingAttribute'</Item>
            </Issue>
           </Message>
           <Message TypeName="MarkAttributesWithAttributeUsage" Category="Microsoft.Design" CheckId="CA1018" Created="2011-03-04 19:11:05Z">
            <Issue Name="Inherited" Certainty="75" Level="Warning">
             <Item>'HydrateUsingAttribute'</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="ImplicitUseKindFlags">
          <Messages>
           <Message Id="Flags" TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726" Created="2011-03-04 19:11:05Z">
            <Issue Name="TypeNoAlternate">
             <Item>Flags</Item>
             <Item>'ImplicitUseKindFlags'</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="ImplicitUseTargetFlags">
          <Messages>
           <Message Id="Flags" TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726" Created="2011-03-04 19:11:05Z">
            <Issue Name="TypeNoAlternate">
             <Item>Flags</Item>
             <Item>'ImplicitUseTargetFlags'</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="MeansImplicitUseAttribute">
          <Members>
           <Member Name="#.ctor(PHydrate.Attributes.ImplicitUseKindFlags)">
            <Messages>
             <Message Id="Flags" TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726" Created="2011-03-04 19:11:05Z">
              <Issue Name="MemberParameterNoAlternate">
               <Item>'MeansImplicitUseAttribute.MeansImplicitUseAttribute(ImplicitUseKindFlags)'</Item>
               <Item>Flags</Item>
               <Item>'useKindFlags'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#.ctor(PHydrate.Attributes.ImplicitUseKindFlags,PHydrate.Attributes.ImplicitUseTargetFlags)">
            <Messages>
             <Message Id="Flags" TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726" Created="2011-03-04 19:11:05Z">
              <Issue Name="MemberParameterNoAlternate">
               <Item>'MeansImplicitUseAttribute.MeansImplicitUseAttribute(ImplicitUseKindFlags, ImplicitUseTargetFlags)'</Item>
               <Item>Flags</Item>
               <Item>'targetFlags'</Item>
              </Issue>
              <Issue Name="MemberParameterNoAlternate">
               <Item>'MeansImplicitUseAttribute.MeansImplicitUseAttribute(ImplicitUseKindFlags, ImplicitUseTargetFlags)'</Item>
               <Item>Flags</Item>
               <Item>'useKindFlags'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#.ctor(PHydrate.Attributes.ImplicitUseTargetFlags)">
            <Messages>
             <Message Id="Flags" TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726" Created="2011-03-04 19:11:05Z">
              <Issue Name="MemberParameterNoAlternate">
               <Item>'MeansImplicitUseAttribute.MeansImplicitUseAttribute(ImplicitUseTargetFlags)'</Item>
               <Item>Flags</Item>
               <Item>'targetFlags'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#TargetFlags">
            <Messages>
             <Message Id="Flags" TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726" Created="2011-03-04 19:11:05Z">
              <Issue Name="MemberNoAlternate">
               <Item>Flags</Item>
               <Item>'MeansImplicitUseAttribute.TargetFlags'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#UseKindFlags">
            <Messages>
             <Message Id="Flags" TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726" Created="2011-03-04 19:11:05Z">
              <Issue Name="MemberNoAlternate">
               <Item>Flags</Item>
               <Item>'MeansImplicitUseAttribute.UseKindFlags'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="ObjectHydratorAttribute">
          <Messages>
           <Message TypeName="AvoidUnsealedAttributes" Category="Microsoft.Performance" CheckId="CA1813" Created="2011-03-04 19:11:05Z">
            <Issue>
             <Item>'ObjectHydratorAttribute'</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="PersistAsAttribute">
          <Messages>
           <Message TypeName="AvoidUnsealedAttributes" Category="Microsoft.Performance" CheckId="CA1813" Created="2011-03-04 19:11:05Z">
            <Issue>
             <Item>'PersistAsAttribute'</Item>
            </Issue>
           </Message>
           <Message TypeName="DefineAccessorsForAttributeArguments" Category="Microsoft.Design" CheckId="CA1019" Created="2011-03-04 19:11:05Z" FixCategory="Breaking">
            <Issue Name="RemoveSetter">
             <Item>'PersistAsAttribute.ColumnName'</Item>
             <Item>'columnName'</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="PrimaryKeyAttribute">
          <Messages>
           <Message TypeName="AvoidUnsealedAttributes" Category="Microsoft.Performance" CheckId="CA1813" Created="2011-03-04 19:11:05Z">
            <Issue>
             <Item>'PrimaryKeyAttribute'</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="RecordsetAttribute">
          <Messages>
           <Message TypeName="AvoidUnsealedAttributes" Category="Microsoft.Performance" CheckId="CA1813" Created="2011-03-04 19:11:05Z">
            <Issue>
             <Item>'RecordsetAttribute'</Item>
            </Issue>
           </Message>
           <Message Id="Recordset" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2011-03-04 19:11:05Z">
            <Issue Name="Type">
             <Item>Recordset</Item>
             <Item>'RecordsetAttribute'</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name="#.ctor(System.Int32)">
            <Messages>
             <Message Id="recordset" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2011-03-04 19:11:05Z">
              <Issue Name="MemberParameter">
               <Item>'RecordsetAttribute.RecordsetAttribute(int)'</Item>
               <Item>recordset</Item>
               <Item>'recordsetNumber'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#RecordsetNumber">
            <Messages>
             <Message Id="Recordset" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2011-03-04 19:11:05Z">
              <Issue Name="Member">
               <Item>Recordset</Item>
               <Item>'RecordsetAttribute.RecordsetNumber'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="UpdateUsingAttribute">
          <Messages>
           <Message TypeName="AvoidUnsealedAttributes" Category="Microsoft.Performance" CheckId="CA1813" Created="2011-03-04 19:11:05Z">
            <Issue>
             <Item>'UpdateUsingAttribute'</Item>
            </Issue>
           </Message>
           <Message TypeName="MarkAttributesWithAttributeUsage" Category="Microsoft.Design" CheckId="CA1018" Created="2011-03-04 19:11:05Z">
            <Issue Name="Inherited" Certainty="75" Level="Warning">
             <Item>'UpdateUsingAttribute'</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="UsedImplicitlyAttribute">
          <Members>
           <Member Name="#.ctor(PHydrate.Attributes.ImplicitUseKindFlags)">
            <Messages>
             <Message Id="Flags" TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726" Created="2011-03-04 19:11:05Z">
              <Issue Name="MemberParameterNoAlternate">
               <Item>'UsedImplicitlyAttribute.UsedImplicitlyAttribute(ImplicitUseKindFlags)'</Item>
               <Item>Flags</Item>
               <Item>'useKindFlags'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#.ctor(PHydrate.Attributes.ImplicitUseKindFlags,PHydrate.Attributes.ImplicitUseTargetFlags)">
            <Messages>
             <Message Id="Flags" TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726" Created="2011-03-04 19:11:05Z">
              <Issue Name="MemberParameterNoAlternate">
               <Item>'UsedImplicitlyAttribute.UsedImplicitlyAttribute(ImplicitUseKindFlags, ImplicitUseTargetFlags)'</Item>
               <Item>Flags</Item>
               <Item>'targetFlags'</Item>
              </Issue>
              <Issue Name="MemberParameterNoAlternate">
               <Item>'UsedImplicitlyAttribute.UsedImplicitlyAttribute(ImplicitUseKindFlags, ImplicitUseTargetFlags)'</Item>
               <Item>Flags</Item>
               <Item>'useKindFlags'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#.ctor(PHydrate.Attributes.ImplicitUseTargetFlags)">
            <Messages>
             <Message Id="Flags" TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726" Created="2011-03-04 19:11:05Z">
              <Issue Name="MemberParameterNoAlternate">
               <Item>'UsedImplicitlyAttribute.UsedImplicitlyAttribute(ImplicitUseTargetFlags)'</Item>
               <Item>Flags</Item>
               <Item>'targetFlags'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#TargetFlags">
            <Messages>
             <Message Id="Flags" TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726" Created="2011-03-04 19:11:05Z">
              <Issue Name="MemberNoAlternate">
               <Item>Flags</Item>
               <Item>'UsedImplicitlyAttribute.TargetFlags'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#UseKindFlags">
            <Messages>
             <Message Id="Flags" TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726" Created="2011-03-04 19:11:05Z">
              <Issue Name="MemberNoAlternate">
               <Item>Flags</Item>
               <Item>'UsedImplicitlyAttribute.UseKindFlags'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="PHydrate.Core">
        <Types>
         <Type Name="DatabaseServiceBase">
          <Members>
           <Member Name="#GetDatabaseConnection()">
            <Messages>
             <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Created="2011-03-04 19:11:05Z">
              <Issue Certainty="50">
               <Item>'DatabaseServiceBase.GetDatabaseConnection()'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="IDatabaseService">
          <Members>
           <Member Name="#ExecuteStoredProcedureReader(System.String,System.Collections.Generic.IEnumerable`1&lt;System.Collections.Generic.KeyValuePair`2&lt;System.String,System.Object&gt;&gt;)">
            <Messages>
             <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Created="2011-03-04 19:11:05Z">
              <Issue>
               <Item>'IDatabaseService.ExecuteStoredProcedureReader(string, IEnumerable&lt;KeyValuePair&lt;string, object&gt;&gt;)'</Item>
               <Item>'IEnumerable&lt;KeyValuePair&lt;string, object&gt;&gt;'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#ExecuteStoredProcedureScalar`1(System.String,System.Collections.Generic.IEnumerable`1&lt;System.Collections.Generic.KeyValuePair`2&lt;System.String,System.Object&gt;&gt;)">
            <Messages>
             <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Created="2011-03-04 19:11:05Z">
              <Issue>
               <Item>'IDatabaseService.ExecuteStoredProcedureScalar&lt;T&gt;(string, IEnumerable&lt;KeyValuePair&lt;string, object&gt;&gt;)'</Item>
               <Item>'IEnumerable&lt;KeyValuePair&lt;string, object&gt;&gt;'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Session">
          <Members>
           <Member Name="#FilterUsingExplicitSpecification`1(PHydrate.ISpecification`1&lt;!!0&gt;,System.Collections.Generic.IEnumerable`1&lt;!!0&gt;)">
            <Messages>
             <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Created="2011-03-04 19:11:05Z">
              <Issue Name="Parameter">
               <Item>'specification'</Item>
               <Item>'IExplicitSpecification&lt;T&gt;'</Item>
               <Item>'Session.FilterUsingExplicitSpecification&lt;T&gt;(ISpecification&lt;T&gt;, IEnumerable&lt;T&gt;)'</Item>
               <Item>castclass</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#Get`1(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!!0,System.Boolean&gt;&gt;)">
            <Messages>
             <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Created="2011-03-04 19:11:05Z">
              <Issue>
               <Item>'Session.Get&lt;T&gt;(Expression&lt;Func&lt;T, bool&gt;&gt;)'</Item>
               <Item>'Expression&lt;Func&lt;T, bool&gt;&gt;'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#GetItemsFromDbSpecification`1(PHydrate.ISpecification`1&lt;!!0&gt;)">
            <Messages>
             <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Created="2011-03-04 19:11:05Z">
              <Issue Name="Parameter">
               <Item>'specification'</Item>
               <Item>'IDbSpecification&lt;T&gt;'</Item>
               <Item>'Session.GetItemsFromDbSpecification&lt;T&gt;(ISpecification&lt;T&gt;)'</Item>
               <Item>castclass</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#Transaction">
            <Accessors>
             <Accessor Name="#get_Transaction()">
              <Messages>
               <Message TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065" Created="2011-03-04 19:11:05Z" FixCategory="Breaking">
                <Issue Name="PropertyGetter" Level="Warning">
                 <Item>'Session.Transaction.get()'</Item>
                 <Item>'NotImplementedException'</Item>
                </Issue>
               </Message>
              </Messages>
             </Accessor>
            </Accessors>
           </Member>
          </Members>
         </Type>
         <Type Name="Session+DataHydrator`1">
          <Members>
           <Member Name="#HydrateRecordsetWithInternals(System.Data.IDataReader,System.Collections.Generic.IEnumerable`1&lt;PHydrate.Util.MemberInfoWrapper.IMemberInfo&gt;)">
            <Messages>
             <Message Id="primaryKeyMembers" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Created="2011-03-04 19:11:05Z">
              <Issue>
               <Item>'Session.DataHydrator&lt;T&gt;.HydrateRecordsetWithInternals(IDataReader, IEnumerable&lt;IMemberInfo&gt;)'</Item>
               <Item>'primaryKeyMembers'</Item>
               <Item>'IList&lt;string&gt;'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="SessionFactory">
          <Members>
           <Member Name="#GlobalTransaction">
            <Accessors>
             <Accessor Name="#get_GlobalTransaction()">
              <Messages>
               <Message TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065" Created="2011-03-04 19:11:05Z" FixCategory="Breaking">
                <Issue Name="PropertyGetter" Level="Warning">
                 <Item>'SessionFactory.GlobalTransaction.get()'</Item>
                 <Item>'NotImplementedException'</Item>
                </Issue>
               </Message>
              </Messages>
             </Accessor>
            </Accessors>
           </Member>
          </Members>
         </Type>
         <Type Name="WeakReferenceObjectCache">
          <Members>
           <Member Name="#CopyTo(System.Object[],System.Int32)">
            <Messages>
             <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Created="2011-03-04 19:11:05Z">
              <Issue Name="NoArguments">
               <Item>'ArgumentException'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="PHydrate.Util">
        <Types>
         <Type Name="ConstructorInfoExtensions">
          <Members>
           <Member Name="#MatchesParameters(System.Reflection.ConstructorInfo,System.Collections.Generic.IList`1&lt;System.Object&gt;)">
            <Messages>
             <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Created="2011-03-04 19:11:05Z">
              <Issue>
               <Item>'ci'</Item>
               <Item>'ConstructorInfoExtensions.MatchesParameters(this ConstructorInfo, IList&lt;object&gt;)'</Item>
               <Item>'ConstructorInfo'</Item>
               <Item>'MethodBase'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="DataReaderExtensions">
          <Members>
           <Member Name="#ToDictionary(System.Data.IDataReader)">
            <Messages>
             <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Created="2011-03-04 19:11:05Z">
              <Issue>
               <Item>'dataReader'</Item>
               <Item>'DataReaderExtensions.ToDictionary(this IDataReader)'</Item>
               <Item>'IDataReader'</Item>
               <Item>'IDataRecord'</Item>
              </Issue>
             </Message>
             <Message Id="System.Collections.Generic.Dictionary`2&lt;System.String,System.Object&gt;.#ctor(System.Collections.Generic.IEqualityComparer`1&lt;System.String&gt;)" TypeName="UseOrdinalStringComparison" Category="Microsoft.Globalization" CheckId="CA1309" Created="2011-03-04 19:11:05Z">
              <Issue Name="StringComparer">
               <Item>'DataReaderExtensions.ToDictionary(this IDataReader)'</Item>
               <Item>StringComparer.InvariantCultureIgnoreCase</Item>
               <Item>'Dictionary&lt;string, object&gt;.Dictionary(IEqualityComparer&lt;string&gt;)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="DbCommandExtensions">
          <Messages>
           <Message Id="Db" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Created="2011-03-04 19:11:05Z">
            <Issue Name="Type">
             <Item>Db</Item>
             <Item>'DbCommandExtensions'</Item>
             <Item>DB</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name="#AddParameter`1(System.Data.IDbCommand,System.String,System.Data.ParameterDirection)">
            <Messages>
             <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Created="2011-03-04 19:11:05Z">
              <Issue>
               <Item>'DbCommandExtensions.AddParameter&lt;T&gt;(this IDbCommand, string, ParameterDirection)'</Item>
               <Item>'T'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="DictionaryExtensions">
          <Members>
           <Member Name="#ContainsKeyNoCase`1(System.Collections.Generic.IDictionary`2&lt;System.String,!!0&gt;,System.String,System.String&amp;)">
            <Messages>
             <Message Id="2#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Created="2011-03-04 19:11:05Z">
              <Issue>
               <Item>'actualName'</Item>
              </Issue>
             </Message>
             <Message TypeName="NormalizeStringsToUppercase" Category="Microsoft.Globalization" CheckId="CA1308" Created="2011-03-04 19:11:05Z">
              <Issue Name="ToUpperInvariant">
               <Item>'DictionaryExtensions.ContainsKeyNoCase&lt;T&gt;(this IDictionary&lt;string, T&gt;, string, out string)'</Item>
               <Item>'string.ToLowerInvariant()'</Item>
              </Issue>
              <Issue Name="ToUpperInvariant">
               <Item>'DictionaryExtensions.ContainsKeyNoCase&lt;T&gt;(this IDictionary&lt;string, T&gt;, string, out string)'</Item>
               <Item>'string.ToLowerInvariant()'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="ExpressionExtensions">
          <Members>
           <Member Name="#GetDataParameters`1(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!!0,System.Boolean&gt;&gt;,System.String)">
            <Messages>
             <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Created="2011-03-04 19:11:05Z">
              <Issue>
               <Item>'expression'</Item>
               <Item>'ExpressionExtensions.GetDataParameters&lt;T&gt;(this Expression&lt;Func&lt;T, bool&gt;&gt;, string)'</Item>
               <Item>'Expression&lt;Func&lt;T, bool&gt;&gt;'</Item>
               <Item>'LambdaExpression'</Item>
              </Issue>
             </Message>
             <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Created="2011-03-04 19:11:05Z">
              <Issue>
               <Item>'ExpressionExtensions.GetDataParameters&lt;T&gt;(this Expression&lt;Func&lt;T, bool&gt;&gt;, string)'</Item>
               <Item>'Expression&lt;Func&lt;T, bool&gt;&gt;'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="ExpressionExtensions+InvokeGeneric">
          <Members>
           <Member Name="#GetVariableValue`1(System.Linq.Expressions.Expression)">
            <Messages>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2011-03-04 19:11:05Z" FixCategory="NonBreaking">
              <Issue>
               <Item>'ExpressionExtensions.InvokeGeneric.GetVariableValue&lt;T&gt;(Expression)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="GenericExtensions">
          <Members>
           <Member Name="#DbNullToDefault`1(!!0)">
            <Messages>
             <Message Id="Db" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Created="2011-03-04 19:11:05Z">
              <Issue Name="Member">
               <Item>Db</Item>
               <Item>'GenericExtensions.DbNullToDefault&lt;T&gt;(this T)'</Item>
               <Item>DB</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#ExecuteGenericMethod`1(!!0,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!!0,System.Object&gt;&gt;,System.Type)">
            <Messages>
             <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Created="2011-03-04 19:11:05Z">
              <Issue>
               <Item>'methodCall'</Item>
               <Item>'GenericExtensions.ExecuteGenericMethod&lt;TSource&gt;(this TSource, Expression&lt;Func&lt;TSource, object&gt;&gt;, Type)'</Item>
               <Item>'Expression&lt;Func&lt;TSource, object&gt;&gt;'</Item>
               <Item>'LambdaExpression'</Item>
              </Issue>
             </Message>
             <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Created="2011-03-04 19:11:05Z">
              <Issue>
               <Item>'GenericExtensions.ExecuteGenericMethod&lt;TSource&gt;(this TSource, Expression&lt;Func&lt;TSource, object&gt;&gt;, Type)'</Item>
               <Item>'Expression&lt;Func&lt;TSource, object&gt;&gt;'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#GetDataParameters`1(!!0,System.String)">
            <Messages>
             <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Created="2011-03-04 19:11:05Z">
              <Issue>
               <Item>'GenericExtensions.GetDataParameters&lt;T&gt;(this T, string)'</Item>
               <Item>'IEnumerable&lt;KeyValuePair&lt;string, object&gt;&gt;'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#GetPropertyValuesWithAttribute`1(System.Object)">
            <Messages>
             <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Created="2011-03-04 19:11:05Z">
              <Issue>
               <Item>'GenericExtensions.GetPropertyValuesWithAttribute&lt;TAttributeType&gt;(this object)'</Item>
               <Item>'TAttributeType'</Item>
              </Issue>
             </Message>
             <Message Id="obj" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Created="2011-03-04 19:11:05Z">
              <Issue Name="LanguageIndependentMemberParameter">
               <Item>'GenericExtensions.GetPropertyValuesWithAttribute&lt;TAttributeType&gt;(this object)'</Item>
               <Item>obj</Item>
               <Item>'obj'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#SetPropertyValueWithAttribute`2(!!0,System.Object)">
            <Messages>
             <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Created="2011-03-04 19:11:05Z">
              <Issue>
               <Item>'GenericExtensions.SetPropertyValueWithAttribute&lt;TInstance, TAttributeType&gt;(this TInstance, object)'</Item>
               <Item>'TAttributeType'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="TypeExtensions">
          <Members>
           <Member Name="#ExecuteGenericMethod`2(System.Type,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!!0,!!1&gt;&gt;,System.Object[])">
            <Messages>
             <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Created="2011-03-04 19:11:05Z">
              <Issue>
               <Item>'methodCall'</Item>
               <Item>'TypeExtensions.ExecuteGenericMethod&lt;TSource, TReturn&gt;(this Type, Expression&lt;Func&lt;TSource, TReturn&gt;&gt;, params object[])'</Item>
               <Item>'Expression&lt;Func&lt;TSource, TReturn&gt;&gt;'</Item>
               <Item>'LambdaExpression'</Item>
              </Issue>
             </Message>
             <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Created="2011-03-04 19:11:05Z">
              <Issue>
               <Item>'TypeExtensions.ExecuteGenericMethod&lt;TSource, TReturn&gt;(this Type, Expression&lt;Func&lt;TSource, TReturn&gt;&gt;, params object[])'</Item>
               <Item>'Expression&lt;Func&lt;TSource, TReturn&gt;&gt;'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#GetMembersWithAttribute`1(System.Type)">
            <Messages>
             <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Created="2011-03-04 19:11:05Z">
              <Issue>
               <Item>'TypeExtensions.GetMembersWithAttribute&lt;T&gt;(this Type)'</Item>
               <Item>'T'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="PHydrate.Util.MemberInfoWrapper">
        <Types>
         <Type Name="IMemberInfo">
          <Members>
           <Member Name="#GetValue(System.Object)">
            <Messages>
             <Message Id="obj" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Created="2011-03-04 19:11:05Z">
              <Issue Name="LanguageIndependentMemberParameter">
               <Item>'IMemberInfo.GetValue(object)'</Item>
               <Item>obj</Item>
               <Item>'obj'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#SetValue(System.Object,System.Object)">
            <Messages>
             <Message Id="obj" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Created="2011-03-04 19:11:05Z">
              <Issue Name="LanguageIndependentMemberParameter">
               <Item>'IMemberInfo.SetValue(object, object)'</Item>
               <Item>obj</Item>
               <Item>'obj'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="MemberInfoWrapper">
          <Messages>
           <Message TypeName="TypeNamesShouldNotMatchNamespaces" Category="Microsoft.Naming" CheckId="CA1724" Created="2011-03-04 19:11:05Z">
            <Issue>
             <Item>'MemberInfoWrapper'</Item>
             <Item>PHydrate.Util.MemberInfoWrapper</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name="#MemberInfo">
            <Messages>
             <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Created="2011-03-04 19:11:05Z">
              <Issue>
               <Item>'MemberInfoWrapper.MemberInfo'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#Type">
            <Accessors>
             <Accessor Name="#get_Type()">
              <Messages>
               <Message TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065" Created="2011-03-04 19:11:05Z" FixCategory="Breaking">
                <Issue Name="PropertyGetter" Level="Warning">
                 <Item>'MemberInfoWrapper.Type.get()'</Item>
                 <Item>'PHydrateInternalException'</Item>
                </Issue>
               </Message>
              </Messages>
             </Accessor>
            </Accessors>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
      </Namespaces>
     </Module>
    </Modules>
   </Target>
  </Targets>
  <Rules>
   <Rule TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210">
    <Resolution Name="NoStrongName">Sign {0} with a strong name key.</Resolution>
   </Rule>
   <Rule TypeName="AvoidEmptyInterfaces" Category="Microsoft.Design" CheckId="CA1040">
    <Resolution Name="Default">Define a custom attribute to replace {0}.</Resolution>
   </Rule>
   <Rule TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020">
    <Resolution Name="Default">Consider merging the types defined in '{0}' with another namespace.</Resolution>
   </Rule>
   <Rule TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021">
    <Resolution Name="Default">Consider a design that does not require that {0} be an out parameter.</Resolution>
   </Rule>
   <Rule TypeName="AvoidUnsealedAttributes" Category="Microsoft.Performance" CheckId="CA1813">
    <Resolution Name="Default">Seal {0}, if possible.</Resolution>
   </Rule>
   <Rule TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011">
    <Resolution Name="Default">Consider changing the type of parameter {0} in {1} from {2} to its base type {3}. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Resolution>
   </Rule>
   <Rule TypeName="DefineAccessorsForAttributeArguments" Category="Microsoft.Design" CheckId="CA1019">
    <Resolution Name="RemoveSetter">Remove the property setter from {0} or reduce its accessibility because it corresponds to positional argument {1}.</Resolution>
   </Rule>
   <Rule TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800">
    <Resolution Name="Parameter">{0}, a parameter, is cast to type {1} multiple times in method {2}. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant {3} instruction.</Resolution>
   </Rule>
   <Rule TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051">
    <Resolution Name="Default">Because field {0} is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Resolution>
   </Rule>
   <Rule TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006">
    <Resolution Name="Default">Consider a design where {0} doesn't nest generic type {1}.</Resolution>
   </Rule>
   <Rule TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065">
    <Resolution Name="PropertyGetter">{0} creates an exception of type {1}, an exception type that should not be raised in a property. If this exception instance might be raised, use a different exception type, convert this property into a method, or change this property's logic so that it no longer raises an exception.</Resolution>
   </Rule>
   <Rule TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004">
    <Resolution Name="Default">Consider a design where {0} doesn't require explicit type parameter {1} in any call to it.</Resolution>
   </Rule>
   <Rule TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709">
    <Resolution Name="Member">Correct the casing of '{0}' in member name {1} by changing it to '{2}'.</Resolution>
    <Resolution Name="Type">Correct the casing of '{0}' in type name {1} by changing it to '{2}'.</Resolution>
   </Rule>
   <Rule TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704">
    <Resolution Name="Member">Correct the spelling of '{0}' in member name {1} or remove it entirely if it represents any sort of Hungarian notation.</Resolution>
    <Resolution Name="MemberParameter">In method {0}, correct the spelling of '{1}' in parameter name {2} or remove it entirely if it represents any sort of Hungarian notation.</Resolution>
    <Resolution Name="Namespace">Correct the spelling of '{0}' in namespace name '{1}'.</Resolution>
    <Resolution Name="Type">Correct the spelling of '{0}' in type name {1}.</Resolution>
   </Rule>
   <Rule TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720">
    <Resolution Name="LanguageIndependentMemberParameter">In member {0}, consider replacing the data type identifier '{1}' in parameter name {2} with a more generic term, such as 'value'.</Resolution>
   </Rule>
   <Rule TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716">
    <Resolution Name="Member">Rename virtual/interface member {0} so that it no longer conflicts with the reserved language keyword '{1}'. Using a reserved keyword as the name of a virtual/interface member makes it harder for consumers in other languages to override/implement the member.</Resolution>
   </Rule>
   <Rule TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032">
    <Resolution Name="MissingConstructor">Add the following constructor to {0}: {1}.</Resolution>
   </Rule>
   <Rule TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208">
    <Resolution Name="NoArguments">Call the {0} constructor that contains a message and/or paramName parameter.</Resolution>
   </Rule>
   <Rule TypeName="MarkAssembliesWithClsCompliant" Category="Microsoft.Design" CheckId="CA1014">
    <Resolution Name="Default">Mark {0} with CLSCompliant(true) because it exposes externally visible types.</Resolution>
   </Rule>
   <Rule TypeName="MarkAttributesWithAttributeUsage" Category="Microsoft.Design" CheckId="CA1018">
    <Resolution Name="Inherited">Even though attribute {0} inherits AttributeUsage from its base type, you should consider explicitly specifying AttributeUsage on the type to improve code readability and documentation.</Resolution>
   </Rule>
   <Rule TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237">
    <Resolution Name="Default">Add [Serializable] to {0} as this type implements ISerializable.</Resolution>
   </Rule>
   <Rule TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822">
    <Resolution Name="Default">The 'this' parameter (or 'Me' in Visual Basic) of {0} is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Resolution>
   </Rule>
   <Rule TypeName="NormalizeStringsToUppercase" Category="Microsoft.Globalization" CheckId="CA1308">
    <Resolution Name="ToUpperInvariant">In method {0}, replace the call to {1} with String.ToUpperInvariant().</Resolution>
   </Rule>
   <Rule TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804">
    <Resolution Name="Default">{0} declares a variable, {1}, of type {2}, which is never used or is only assigned to. Use this variable or remove it.</Resolution>
   </Rule>
   <Rule TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305">
    <Resolution Name="IFormatProviderAlternateString">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, specify {3} as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify {4}.</Resolution>
   </Rule>
   <Rule TypeName="TypeNamesShouldNotMatchNamespaces" Category="Microsoft.Naming" CheckId="CA1724">
    <Resolution Name="Default">The type name {0} conflicts in whole or in part with the namespace name '{1}'. Change either name to eliminate the conflict.</Resolution>
   </Rule>
   <Rule TypeName="UseOrdinalStringComparison" Category="Microsoft.Globalization" CheckId="CA1309">
    <Resolution Name="StringComparer">{0} passes '{1}' as the 'StringComparer' parameter to {2}. To perform a non-linguistic comparison, specify 'StringComparer.Ordinal' or 'StringComparer.OrdinalIgnoreCase' instead.</Resolution>
   </Rule>
   <Rule TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726">
    <Resolution Name="MemberNoAlternate">Replace the term '{0}' in member name {1} with an appropriate alternate or remove it entirely.</Resolution>
    <Resolution Name="MemberParameterNoAlternate">In member {0}, replace the term '{1}' in parameter name {2} with an appropriate alternate or remove it entirely.</Resolution>
    <Resolution Name="TypeNoAlternate">Replace the term '{0}' in type name {1} with an appropriate alternate or remove it entirely.</Resolution>
   </Rule>
   <Rule TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024">
    <Resolution Name="Default">Change {0} to a property if appropriate.</Resolution>
   </Rule>
  </Rules>
 </FxCopReport>
</FxCopProject>
